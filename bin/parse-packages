#!/usr/bin/perl -w
# Convert Packages.gz files into Sleepycat db files for efficient usage of
# data
#
# $Id$
#
# Copyright (C) 2006  Jeroen van Wolffelaar <jeroen@wolffelaar.nl>
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA

use strict;
use warnings;
use lib './lib';

$| = 1;

my $what = $ARGV[0] ? "non-free" : "*";
# max. distinct results for a given package postfix
my $MAX_PACKAGE_POSTFIXES = 100;

use DB_File;
use Storable;
use File::Path;
use Digest::MD5;
use Deb::Versions;
use Lingua::Stem v0.82;
use Search::Xapian;
use Packages::Config qw( $TOPDIR $DBDIR @ARCHIVES @SUITES );
&Packages::Config::init( './' );
my %packages_small = ();
my %virtual_packages = ();
my %package_names = ();
my %package_postfixes = ();
my %sources_packages = ();
my %descriptions = ();
my @descriptions = ("we count lines one-based\000");
my %packages_descriptions = ();
my %descriptions_packages = ();

my %sections = ();
my %subsections = ();
my %priorities = ();

$/ = "";

-d $DBDIR || mkpath( $DBDIR );
-d "$DBDIR/xapian.new" && rmtree("$DBDIR/xapian.new");
-d "$DBDIR/xapian.old" && rmtree("$DBDIR/xapian.old");
mkpath( "$DBDIR/xapian.new" );

for my $suite (@SUITES) {
    my %package_names_suite = ();
    my %packages_all_db;
    tie %packages_all_db, "DB_File", "$DBDIR/packages_all_$suite.db.new",
	    O_RDWR|O_CREAT, 0666, $DB_BTREE
	    or die "Error creating DB: $!";

    for my $archive (@ARCHIVES) {
	print "Reading $archive/$suite...\n";
	if (!-d "$TOPDIR/archive/$archive/$suite/") {
                print "\tseems not to exist, skipping...\n";
                next;
        }
	open PKG, "zcat $TOPDIR/archive/$archive/$suite/$what/{,debian-installer/}binary-*/Packages.gz|";
	while (<PKG>) {
		next if /^\s*$/;
		my $data = "";
		my %data = ();
		chomp;
		s/\n /\377/g;
		while (/^(\S+):\s*(.*)\s*$/mg) {
			my ($key, $value) = ($1, $2);
			$value =~ s/\377/\n /g;
			$key =~ tr [A-Z] [a-z];
			$data{$key} = $value;
		}
		# Skip double package
		next if exists($packages_all_db{"$data{'package'} $data{'architecture'} $data{'version'}"});
		# Skip arch:all for amd64 & gnuab, any non-redundancy is
		# usually a bug anyway
		next if ($archive eq 'amd64' or $archive eq 'gnuab')
		    and $data{architecture} eq 'all';

		if ($data{'provides'}) {
		    foreach (split /\s*,\s*/, $data{'provides'}) {
			$virtual_packages{$_}{$suite}{$data{'package'}}++;
			$packages_small{$_} ||= {};
		    }
		}
		$package_names{$data{'package'}} = 1;
		$package_names_suite{$data{'package'}} = 1;
		my $src = $data{'package'};
		my $src_version = '';
		if ($data{'source'}) {
			$src = $data{'source'};
			$src =~ s/\s+.*//o; # strip version info
		}
		$data{'source'} = $src;

		# expand tags like devel::{lang:c,lang:c++}
		if ($data{'tag'} && $data{'tag'} =~ /\{/) {
		    my @complete_tags = split(/, /, $data{'tag'});
		    my @tags;
		    foreach (@complete_tags) {
			my ($facet, $tag) = split( /::/, $_, 2);
			if ($tag =~ s/^\{(.+)\}$/$1/) {
			    foreach (split( /,/, $tag )) {
				push @tags, "${facet}::$_";
			    }
			} else {
			    push @tags, "${facet}::$tag";
			}
		    }
		    my $old = $data{tag};
		    $data{'tag'} = join ", ", @tags;
		}

		# we add some additional data here
		my $descr = "$data{'description'}\000$data{'package'}\000"
		    .($data{'tag'}||'');
		my $sdescr = $data{'description'};
		$sdescr =~ s/\n.*//os;
		my $did = undef;
		if (exists($descriptions{$descr})) {
			$did  = $descriptions{$descr};
		} else {
			$did = 1 + $#descriptions;
			$descriptions[$did] = $descr;
			$descriptions{$descr} = $did;
		}
		$data{'description-md5'} = Digest::MD5::md5_hex($data{'description'}, "\n");
		$data{'description'} = $did;
		$packages_descriptions{"$data{'package'} $data{'version'} $data{'architecture'}"} = $did;
		$descriptions_packages{$did} .=
			"$data{'package'} $data{'version'} $data{'architecture'}\000";

		my $section = 'main';
		my $subsection = $data{section} || '-';
		if ($data{section} && ($data{section} =~ m=/=o)) {
		    ($section, $subsection) = split m=/=o, $data{section}, 2;
		}
		$data{'section'} = $section;
		$data{'subsection'} = $subsection;
		$data{'priority'} ||= '-';
		$sections{$suite}{$section}++;
		$subsections{$suite}{$subsection}++;
		$priorities{$suite}{$data{priority}}++;
		my $pkgitem = "$archive $suite $data{'architecture'} ".
			"$section $subsection $data{'priority'} $data{'version'} $sdescr\0";
		my $previtem = ($packages_small{$data{'package'}}{$suite}{$data{'architecture'}}
		    ||= $pkgitem);
		$packages_small{$data{'package'}}{$suite}{$data{'architecture'}} = $pkgitem
		    if version_cmp($data{'version'}, (split /\s/o, $previtem)[6]) > 0;
		$previtem = ($packages_small{$data{'package'}}{$suite}{'any'}
		    ||= $pkgitem);
		$packages_small{$data{'package'}}{$suite}{'any'} = $pkgitem
		    if version_cmp($data{'version'}, (split /\s/o, $previtem)[6]) > 0;
		$sources_packages{$src} .=
			"$archive $suite $data{'package'} $data{'version'} $data{'architecture'}\000";
		$data{archive} = $archive;
		while (my ($key, $value) = each (%data)) {
			next if $key eq 'package' or $key eq 'version' or $key eq 'architecture'
				or $key eq 'maintainer';
			print STDERR "WARN: $key ($suite/$archive/$data{package}/$data{architecture}\n" unless defined $value;
			$data .= "$key\00$value\00";
		}
		$data =~ s/.$//s;
		$packages_all_db{"$data{'package'} $data{'architecture'} $data{'version'}"}
			= $data;
	}
    }

    open NAMES, '>', "$DBDIR/package_names_$suite.txt.new"
	or die "Error creating package names list: $!";
    foreach (sort keys %package_names_suite) {
	print NAMES "$_\n";
    }
    close NAMES;

    untie %packages_all_db;
}

print "Writing databases...\n";
my %packages_small_db;
tie %packages_small_db, "DB_File", "$DBDIR/packages_small.db.new",
	O_RDWR|O_CREAT, 0666, $DB_BTREE
	or die "Error creating DB: $!";
while (my ($pkg, $v) = each(%packages_small)) {
	my ($res1, $res2, $res3) = ("", "", "");
	while (my ($suite, $v2) = each %$v) {
	    $res2 .= $v2->{'any'};
	    while (my ($arch, $v3) = each %$v2) {
		next if $arch eq 'any' or $v3 eq $v2->{'any'};
		$res3 .= $v3;
	    }
	}

	if (exists $virtual_packages{$pkg}) {
		while (my ($suite, $v2) = each %{$virtual_packages{$pkg}}) {
			$res1 .= "$suite\01".(join ' ', keys %$v2)."\01";
		}
	} else {
		$res1 .= "-\01-\01";
	}
	$res1 =~ s/.$/\0/s;

	my $res = "$res1$res2$res3";
	$res =~ s/.$//s;
	$packages_small_db{$pkg} = $res;
}
untie %packages_small_db;

my %sources_packages_db;
tie %sources_packages_db, "DB_File", "$DBDIR/sources_packages.db.new",
	O_RDWR|O_CREAT, 0666, $DB_BTREE
	or die "Error creating DB: $!";
while (my ($k, $v) = each(%sources_packages)) {
	$v =~ s/.$//s;
	$sources_packages_db{$k} = $v;
}
untie %sources_packages_db;

my %packages_descriptions_db;
tie %packages_descriptions_db, "DB_File", "$DBDIR/packages_descriptions.db.new",
	O_RDWR|O_CREAT, 0666, $DB_BTREE
	or die "Error creating DB: $!";
while (my ($k, $v) = each(%packages_descriptions)) {
	$packages_descriptions_db{$k} = $v;
}
untie %packages_descriptions_db;

my %descriptions_packages_db;
tie %descriptions_packages_db, "DB_File", "$DBDIR/descriptions_packages.db.new",
	O_RDWR|O_CREAT, 0666, $DB_BTREE
	or die "Error creating DB: $!";
while (my ($k, $v) = each(%descriptions_packages)) {
	$v =~ s/.$//s;
	$descriptions_packages_db{$k} = $v;
}
untie %descriptions_packages_db;

my $stemmer = Lingua::Stem->new();
$stemmer->stem_caching({ -level => 2 });
my $xapian_db;
eval {
    $xapian_db = Search::Xapian::WritableDatabase->new("$DBDIR/xapian.new",
						       Search::Xapian::DB_CREATE_OR_OPEN)
	or die "can't create write-able db object: $!\n";
};
die $@ if $@;
my %descriptions_db;
tie %descriptions_db, "DB_File", "$DBDIR/descriptions.db.new",
	O_RDWR|O_CREAT, 0666, $DB_BTREE
	or die "Error creating DB: $!";
print "Index $#descriptions descriptions\n";
for (my $i=1; $i<= $#descriptions; $i++) {
	# strip away additional data
	my ($only_desc, $pkg, $tags) = split /\000/o, $descriptions[$i], 3;
	my $orig_desc = $only_desc;
# WARNING: This needs to correspond with what happens in
# Packages/Search.pm:do_xapian_search
	$only_desc =~ s#[^\w/+]+# #og;

	#XAPIAN
	eval {
	    my @words = split /\s+/, $only_desc;
	    unshift @words, $pkg;

	    my $doc = Search::Xapian::Document->new()
		or die "can't create doc object for $i: $!\n";
	    if ($doc->set_data($i)){
		warn "can't set_data in doc object for $i: $!\n";
	    }

	    # package with prefix
	    if ($doc->add_term("P$pkg")) {
		warn "can't add term P$pkg: $!\n";
	    }
	    # description, unstemmed with positional info
	    for my $j (0 .. (@words-1)) {
		next if $words[$j] =~ /^\s*$/o;
		if ($doc->add_posting($words[$j], $j)) {
		    warn "can't add posting $words[$j] at $j: $!\n";
		}
	    }
	    # description, stemmed
	    my $stem_words = $stemmer->stem( \@words );
	    foreach my $w (@$stem_words) {
		next if $w =~ /^\s*$/o;
		if ($doc->add_term($w)) {
		    warn "can't add term $w: $!\n";
		}
	    }
	    if ($tags) {
		foreach my $t (split /, /, $tags) {
		    if ($doc->add_term($t)) {
			warn "can't add term $t: $!\n";
		    }
		}
	    }

	    $xapian_db->add_document($doc)
		or warn "failed to add document: $i\n";
	};
	die $@ if $@;

	$descriptions_db{$i} = $orig_desc;
}
untie %descriptions_db;
$xapian_db->flush;
undef $xapian_db;

# package names stuff:
for my $pkg (keys %package_names) {
	for (my $i=0;$i<length($pkg)-1;$i++) {
		my $before = substr($pkg, 0, $i);
		my $after = substr($pkg, $i);
		$before = "^" if $before eq ""; # otherwise split doesn't work properly
		$package_postfixes{$after} .= "$before\0";
	}
}
my %package_postfixes_db;
tie %package_postfixes_db, "DB_File", "$DBDIR/package_postfixes.db.new",
	O_RDWR|O_CREAT, 0666, $DB_BTREE
	or die "Error creating DB: $!";
while (my ($k, $v) = each(%package_postfixes)) {
	$v =~ s/.$//s;
	my $nr = $v;
	$nr =~ s/[^\000]//g;
	$nr = length($nr) + 1; # < number of hits
	if ($nr > $MAX_PACKAGE_POSTFIXES) {
		$v = "\001" . $nr;
	}
	$package_postfixes_db{$k} = $v;
}
untie %package_postfixes_db;

store \%sections, "$DBDIR/sections.info";
store \%subsections, "$DBDIR/subsections.info";
store \%priorities, "$DBDIR/priorities.info";

rename("$DBDIR/packages_small.db.new", "$DBDIR/packages_small.db");
rename("$DBDIR/sources_packages.db.new", "$DBDIR/sources_packages.db");
for my $suite (@SUITES) {
	rename("$DBDIR/packages_all_$suite.db.new",
	       "$DBDIR/packages_all_$suite.db");
	rename("$DBDIR/package_names_$suite.txt.new",
	       "$DBDIR/package_names_$suite.txt");
}
rename("$DBDIR/xapian", "$DBDIR/xapian.old");
rename("$DBDIR/xapian.new","$DBDIR/xapian");
rmtree("$DBDIR/xapian.old");
rename("$DBDIR/packages_descriptions.db.new",
       "$DBDIR/packages_descriptions.db");
rename("$DBDIR/descriptions_packages.db.new",
       "$DBDIR/descriptions_packages.db");
rename("$DBDIR/descriptions.db.new", "$DBDIR/descriptions.db");
rename("$DBDIR/package_postfixes.db.new", "$DBDIR/package_postfixes.db");
