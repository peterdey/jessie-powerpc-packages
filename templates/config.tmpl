[%- DEFAULT
   charset = 'UTF-8'
   po_lang = 'en'
   ddtp_lang = 'en'

   organisation = 'Debian'
   project_homepage = 'http://www.debian.org/'
   packages_homepage = 'http://packages.debian.net/'
   searchformurl = packages_homepage
   search_url = '/search'
   tags_url = 'http://debtags.alioth.debian.org/'
   bugs_url = 'http://bugs.debian.org/'
   pts_url = 'http://packages.qa.debian.org/'
   ddpo_url = 'http://qa.debian.org/developer.php?login='
   src_bugs_url = bugs_url _ 'src:'
   mirror_url = 'http://ftp.debian.org/'
   security_mirror = 'security.debian.org'
   security_mirror_url = security_mirror _ '/debian-security'
   security_suite_suffix = '/updates'
   changelogs_url = 'http://packages.debian.org/changelogs/'
   policy_url = 'http://www.debian.org/doc/debian-policy/'
   cn_help_url = project_homepage _ 'intro/cn'
   logo = {
	url => project_homepage,
        src => '/Pics/openlogo-nd-25.png',
        alt => organisation,
   }
   copyright = {
	url => 'http://www.spi-inc.org/',
        name => 'SPI Inc.',
        years => '1997 - ' _ timestamp.year,
   }
   license = {
	url => project_homepage _ 'license'
   }
   trademark = {
	name => copyright.name,
	url => project_homepage _ 'trademark'
   }
   contact = {
	name => g('Debian Web Mailinglist'),
	mail => 'debian-www@lists.debian.org',
        url => project_homepage _ 'contact',
   }
   admin = {
	name => g('%s Webmaster', organisation),
	mail => 'webmaster@debian.org',
   }
   trademarknotes = g('%s is a <a href="%s">trademark</a> of %s', organisation, trademark.url, trademark.name)
#   sponsor = {
#   	url => 'http://example.invalid/',
#	name => 'Example Sponsor, Inc.',
#   }
-%]
[%-
   # possible values for importance: high, normal, low
   sitewidemsg = { importance => "high",
		   txt => g('Please note that this is an experimental version of <a href="http://%s/">%s</a>. Errors and obsolete information should be expected', 'packages.debian.org', 'packages.debian.org') }
-%]
[%# @translators: . = decimal_point , = thousands_sep, see Number::Format %]
[%- USE num = Number.Format( decimal_point => g('.'),
    	      		     thousands_sep => g(','),
			     decimal_fill  => 1 ) -%]
